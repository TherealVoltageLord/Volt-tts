// Initialize particles.js
document.addEventListener('DOMContentLoaded', function() {
    particlesJS("particles-js", {
        particles: {
            number: { value: 80, density: { enable: true, value_area: 800 } },
            color: { value: "#9c27b0" },
            shape: { type: "circle" },
            opacity: { value: 0.5, random: true },
            size: { value: 3, random: true },
            line_linked: { enable: true, distance: 150, color: "#9c27b0", opacity: 0.4, width: 1 },
            move: { enable: true, speed: 2, direction: "none", random: true, straight: false, out_mode: "out" }
        },
        interactivity: {
            detect_on: "canvas",
            events: {
                onhover: { enable: true, mode: "repulse" },
                onclick: { enable: true, mode: "push" }
            }
        }
    });

    // Initialize service worker
    if ('serviceWorker' in navigator) {
        navigator.serviceWorker.register('sw.js')
            .then(registration => {
                console.log('ServiceWorker registered');
                checkInstallPrompt();
            })
            .catch(err => {
                console.log('ServiceWorker registration failed: ', err);
            });
    }
});

// Theme toggle
const themeToggle = document.getElementById('themeToggle');
themeToggle.addEventListener('click', () => {
    document.body.classList.toggle('light-mode');
    const icon = themeToggle.querySelector('i');
    if (document.body.classList.contains('light-mode')) {
        icon.classList.replace('fa-moon', 'fa-sun');
        document.querySelector('meta[name="theme-color"]').setAttribute('content', '#f5f5f5');
    } else {
        icon.classList.replace('fa-sun', 'fa-moon');
        document.querySelector('meta[name="theme-color"]').setAttribute('content', '#0f0c29');
    }
});

// Speed and pitch controls
const speedControl = document.getElementById('speedControl');
const pitchControl = document.getElementById('pitchControl');
const speedValue = document.getElementById('speedValue');
const pitchValue = document.getElementById('pitchValue');

speedControl.addEventListener('input', () => {
    speedValue.textContent = speedControl.value;
});

pitchControl.addEventListener('input', () => {
    pitchValue.textContent = pitchControl.value;
});

let selectedAccent = "us";
let audioBlob = null;
let currentAudioUrl = null;
let deferredPrompt = null;

// Voice bubble selection with instant conversion
document.querySelectorAll(".voice-bubble").forEach(bubble => {
    bubble.addEventListener("click", async function() {
        document.querySelectorAll(".voice-bubble").forEach(b => b.classList.remove("active", "pulse"));
        this.classList.add("active", "pulse");
        selectedAccent = this.dataset.accent;
        
        const text = document.getElementById("textInput").value.trim();
        if (!text) return;
        
        await convertTextToSpeech(text, selectedAccent);
    });
});

// Main conversion function
async function convertTextToSpeech(text, accent) {
    const speed = speedControl.value;
    const pitch = pitchControl.value;
    
    document.getElementById("loadingSpinner").style.display = "block";
    document.querySelectorAll("button").forEach(btn => btn.disabled = true);

    try {
        const response = await fetch("https://voltagelord-volt-tts.hf.space/tts", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ text, accent, speed, pitch })
        });

        if (!response.ok) throw new Error(await response.text());
        
        audioBlob = await response.blob();
        if (currentAudioUrl) URL.revokeObjectURL(currentAudioUrl);
        currentAudioUrl = URL.createObjectURL(audioBlob);
        
        const audioPlayer = document.getElementById("audioPlayer");
        audioPlayer.src = currentAudioUrl;
        audioPlayer.play();
        
        document.getElementById("pausePlayBtn").innerHTML = '<i class="fas fa-pause"></i> Pause';

    } catch (error) {
        console.error("Conversion error:", error);
        alert("❌ Error: " + error.message);
    } finally {
        document.getElementById("loadingSpinner").style.display = "none";
        document.querySelectorAll("button").forEach(btn => btn.disabled = false);
    }
}

// Play/Pause button
document.getElementById("pausePlayBtn").addEventListener("click", () => {
    const audio = document.getElementById("audioPlayer");
    if (audio.paused) {
        audio.play();
        document.getElementById("pausePlayBtn").innerHTML = '<i class="fas fa-pause"></i> Pause';
    } else {
        audio.pause();
        document.getElementById("pausePlayBtn").innerHTML = '<i class="fas fa-play"></i> Play';
    }
});

// Download button
document.getElementById("downloadBtn").addEventListener("click", () => {
    if (!audioBlob) {
        alert("❌ No audio to download!");
        return;
    }
    
    const fileName = `VoltTTS-${selectedAccent}-${Date.now()}.mp3`;
    const a = document.createElement("a");
    a.href = currentAudioUrl;
    a.download = fileName;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
});

// Share button
document.getElementById("shareBtn").addEventListener("click", async () => {
    if (!audioBlob) {
        alert("❌ No audio to share!");
        return;
    }
    
    if (!navigator.canShare) {
        alert("Web Share API not supported in your browser");
        return;
    }
    
    try {
        const file = new File([audioBlob], `VoltTTS-${selectedAccent}.mp3`, { type: "audio/mpeg" });
        await navigator.share({
            title: "Volt TTS Audio",
            text: "Check out this audio generated by Volt TTS!",
            files: [file]
        });
    } catch (error) {
        console.error("Sharing failed:", error);
        if (error.name !== 'AbortError') {
            alert("Couldn't share audio: " + error.message);
        }
    }
});

// PWA Installation
function checkInstallPrompt() {
    window.addEventListener('beforeinstallprompt', (e) => {
        e.preventDefault();
        deferredPrompt = e;
        
        // Show install button in controls
        document.getElementById('installBtn').style.display = 'inline-flex';
        
        // Show notification after 10 seconds if not installed
        setTimeout(() => {
            if (!window.matchMedia('(display-mode: standalone)').matches) {
                showInstallNotification();
            }
        }, 10000);
    });
}

function showInstallNotification() {
    const notification = document.getElementById('installNotification');
    notification.style.display = 'flex';
    
    document.getElementById('installNowBtn').addEventListener('click', () => {
        if (deferredPrompt) {
            deferredPrompt.prompt();
            deferredPrompt.userChoice.then((choiceResult) => {
                if (choiceResult.outcome === 'accepted') {
                    console.log('User accepted install');
                }
                notification.style.display = 'none';
                deferredPrompt = null;
            });
        }
    });
    
    document.getElementById('dismissInstallBtn').addEventListener('click', () => {
        notification.style.display = 'none';
    });
}

// Install button in controls
document.getElementById('installBtn').addEventListener('click', () => {
    if (deferredPrompt) {
        deferredPrompt.prompt();
        deferredPrompt.userChoice.then((choiceResult) => {
            if (choiceResult.outcome === 'accepted') {
                console.log('User accepted install');
            }
            deferredPrompt = null;
        });
    }
});
